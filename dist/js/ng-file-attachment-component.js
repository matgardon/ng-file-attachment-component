var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var services;
        (function (services) {
            var FileAttachmentService = (function () {
                /* @ngInject */
                FileAttachmentService.$inject = ["httpWrapperService", "$log", "$timeout", "Upload", "Blob", "FileSaver", "fileAttachmentOriginEnum", "applicationOriginEnum"];
                function FileAttachmentService(httpWrapperService, $log, $timeout, Upload, Blob, //TODO MGA: typings ?
                    FileSaver, //TODO MGA: typings ?
                    fileAttachmentOriginEnum, applicationOriginEnum) {
                    this.httpWrapperService = httpWrapperService;
                    this.$log = $log;
                    this.$timeout = $timeout;
                    this.Upload = Upload;
                    this.Blob = Blob;
                    this.FileSaver = FileSaver;
                    this.fileAttachmentOriginEnum = fileAttachmentOriginEnum;
                    this.applicationOriginEnum = applicationOriginEnum;
                }
                FileAttachmentService.prototype.getAttachedFiles = function (elementId, applicationOrigin) {
                    //TODO MGA : cleaner params handling to pass to http call
                    return this.httpWrapperService.get('file-attachment/search', {
                        params: { 'elementId': elementId, 'applicationOrigin': this.applicationOriginEnum[applicationOrigin] },
                        apiEndpoint: true
                    });
                };
                FileAttachmentService.prototype.attachFile = function (elementId, applicationOrigin, fileToUpload) {
                    var _this = this;
                    if (!fileToUpload) {
                        this.$log.warn('[fileAttachmentService.attachFile] file is empty, aborting upload.');
                        return null;
                    }
                    //TODO MGA: we should rely on a stronger http-wrapper to handle upload this way
                    return this.Upload.base64DataUrl(fileToUpload).then(function (fileBase64Url) {
                        return _this.httpWrapperService.post('file-attachment/put', 
                        //TODO MGA : create model for AttachFileDto & FileUploadBaseDto
                        {
                            'ElementId': elementId,
                            'ApplicationOrigin': _this.applicationOriginEnum[applicationOrigin],
                            'FileUploadBaseDto': {
                                'FileName': fileToUpload.name,
                                'FileBase64Url': fileBase64Url.slice(fileBase64Url.indexOf('base64,') + 'base64,'.length),
                                'ContentType': fileToUpload.type
                            }
                        }, {
                            apiEndpoint: true,
                            uploadInBase64Json: true
                        });
                    });
                };
                FileAttachmentService.prototype.downloadAttachedFile = function (fileAttachment, fileOrigin) {
                    var _this = this;
                    if (!fileAttachment || !fileAttachment.Id || !fileAttachment.FileName) {
                        this.$log.error('[fileAttachment] mandatory.');
                        return null;
                    }
                    return this.httpWrapperService.getFile('file-attachment/download', {
                        params: { 'fileAttachmentId': fileAttachment.Id, 'fileOrigin': this.fileAttachmentOriginEnum[fileOrigin] },
                        apiEndpoint: true
                    }).then(function (file) {
                        //TODO MGA: extract file download as a separate service
                        //var filewithBOM = '\uFEFF'+ file; //Add BOM UTF-8 before ? for now delayed to FileSaver.saveAs() flag autoBOM parameter.
                        var blob = new Blob([file.content], { type: file.type });
                        //var blob = new Blob([file], { type: 'application/octet-stream;utf-8' });
                        //var blob = new Blob([file], { type: 'image/png;charset=windows-1252' });
                        //var blob = new Blob([file], { type: 'image/png;charset=ISO-8859-1' });
                        _this.FileSaver.saveAs(blob, file.name || fileAttachment.FileName || 'unknown.bin'); // autoBOM enabled by default
                        return;
                    });
                };
                FileAttachmentService.prototype.deleteAttachedFile = function (fileAttachmentId, fileOrigin) {
                    return this.httpWrapperService.delete('file-attachment/delete', {
                        params: { 'fileAttachmentId': fileAttachmentId, 'fileOrigin': this.fileAttachmentOriginEnum[fileOrigin] },
                        apiEndpoint: true
                    });
                };
                FileAttachmentService.prototype.editFileAttachmentComment = function (fileAttachmentId, fileOrigin, updatedComment) {
                    return this.httpWrapperService.post('file-attachment/update-comment', 
                    //TODO MGA : create Dto client-side or update endpoint srv-side to support part-params url + comment as payload (cleaner SOC).
                    {
                        'FileAttachmentId': fileAttachmentId,
                        'FileOrigin': this.fileAttachmentOriginEnum[fileOrigin],
                        'Comment': updatedComment
                    }, { apiEndpoint: true });
                };
                FileAttachmentService.prototype.getSupportedExtensions = function () {
                    return this.httpWrapperService.get('file-attachment/authorized-file-extensions', { apiEndpoint: true });
                };
                FileAttachmentService.prototype.getSupportedMimeTypes = function () {
                    return this.httpWrapperService.get('file-attachment/authorized-mime-types', { apiEndpoint: true });
                };
                FileAttachmentService.prototype.getCurrentUserUploadRights = function (elementId, applicationOrigin) {
                    return this.httpWrapperService.get('file-attachment/get-current-user-upload-rights', {
                        params: { 'elementId': elementId, 'applicationOrigin': this.applicationOriginEnum[applicationOrigin] },
                        apiEndpoint: true
                    })
                        .then(function (response) { return response.booleanResponse; });
                };
                return FileAttachmentService;
            }());
            services.FileAttachmentService = FileAttachmentService;
            angular.module('bluesky.core.services.fileAttachment', [
                'ng.httpWrapper',
                'ngFileUpload',
                'ngFileSaver',
                'bluesky.core.models.fileAttachmentOriginEnum',
                'bluesky.core.models.applicationOriginEnum'
            ]).service('fileAttachmentService', FileAttachmentService);
        })(services = core.services || (core.services = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

//TODO MGA: very important to not use delegate here, otherwise this is badly captured. it MUST be an anonymous function.
File.prototype.getFileExtension = function () {
    return this.name.substr(this.name.lastIndexOf('.') + 1).toLowerCase();
};

var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var models;
        (function (models) {
            /**
             * TODO MGA : decide on practice to share enums with srv etc
             */
            (function (ApplicationOriginEnum) {
                ApplicationOriginEnum[ApplicationOriginEnum["QuoteWizard"] = 0] = "QuoteWizard";
                ApplicationOriginEnum[ApplicationOriginEnum["OrderEntry"] = 1] = "OrderEntry";
                ApplicationOriginEnum[ApplicationOriginEnum["OrderTracking"] = 2] = "OrderTracking";
            })(models.ApplicationOriginEnum || (models.ApplicationOriginEnum = {}));
            var ApplicationOriginEnum = models.ApplicationOriginEnum;
            /**
             * declared as angular module to be injected at runtime inside controllers/services to use it as a dictionnary.
             * Otherwise, we are not sure the reference to this object will ve known at runtime due to order of evaluation of imports inside generated js.
             */
            angular.module('bluesky.core.models.applicationOriginEnum', [])
                .constant('applicationOriginEnum', ApplicationOriginEnum);
        })(models = core.models || (core.models = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var models;
        (function (models) {
            /**
             * TODO MGA : decide on practice to share enums with srv etc
             */
            (function (FileAttachmentOriginEnum) {
                FileAttachmentOriginEnum[FileAttachmentOriginEnum["QuoteWizardFileAttachment"] = 0] = "QuoteWizardFileAttachment";
                FileAttachmentOriginEnum[FileAttachmentOriginEnum["OrderEntryCustomDetails"] = 1] = "OrderEntryCustomDetails";
                FileAttachmentOriginEnum[FileAttachmentOriginEnum["OrderEntryAudioCustomDetail"] = 2] = "OrderEntryAudioCustomDetail";
                FileAttachmentOriginEnum[FileAttachmentOriginEnum["OrderTrackingFileAttachment"] = 3] = "OrderTrackingFileAttachment";
            })(models.FileAttachmentOriginEnum || (models.FileAttachmentOriginEnum = {}));
            var FileAttachmentOriginEnum = models.FileAttachmentOriginEnum;
            /**
             * declared as angular module to be injected at runtime inside controllers/services to use it as a dictionnary.
             * Otherwise, we are not sure the reference to this object will ve known at runtime due to order of evaluation of imports inside generated js.
             */
            angular.module('bluesky.core.models.fileAttachmentOriginEnum', [])
                .constant('fileAttachmentOriginEnum', FileAttachmentOriginEnum);
        })(models = core.models || (core.models = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var models;
        (function (models) {
            /**
             * TODO MGA : export an interface too ?
             */
            var FileAttachment = (function () {
                function FileAttachment(
                    //srv-side properties
                    Id, FileName, Comment, UploaderInformation, CreationDate, FileOrigin, CanCurrentUserDownloadFile, CanCurrentUserDeleteFile, CanCurrentUserEditComment, 
                    //client-side properties
                    editCommentMode, updatedComment, updatedCommentErrorMessage) {
                    this.Id = Id;
                    this.FileName = FileName;
                    this.Comment = Comment;
                    this.UploaderInformation = UploaderInformation;
                    this.CreationDate = CreationDate;
                    this.FileOrigin = FileOrigin;
                    this.CanCurrentUserDownloadFile = CanCurrentUserDownloadFile;
                    this.CanCurrentUserDeleteFile = CanCurrentUserDeleteFile;
                    this.CanCurrentUserEditComment = CanCurrentUserEditComment;
                    this.editCommentMode = editCommentMode;
                    this.updatedComment = updatedComment;
                    this.updatedCommentErrorMessage = updatedCommentErrorMessage;
                }
                return FileAttachment;
            }());
            models.FileAttachment = FileAttachment;
            var UserInformation = (function () {
                function UserInformation(FirstName, LastName, DisplayName, userIdentifier, Email, PhoneNumber) {
                    this.FirstName = FirstName;
                    this.LastName = LastName;
                    this.DisplayName = DisplayName;
                    this.userIdentifier = userIdentifier;
                    this.Email = Email;
                    this.PhoneNumber = PhoneNumber;
                }
                return UserInformation;
            }());
            models.UserInformation = UserInformation;
        })(models = core.models || (core.models = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var models;
        (function (models) {
            var JsonBooleanResponse = (function () {
                function JsonBooleanResponse(booleanResponse) {
                    this.booleanResponse = booleanResponse;
                }
                return JsonBooleanResponse;
            }());
            models.JsonBooleanResponse = JsonBooleanResponse;
        })(models = core.models || (core.models = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

var bluesky;
(function (bluesky) {
    var core;
    (function (core) {
        var components;
        (function (components) {
            //TODO MGA: convert both constants to srv-side provided limit to stay in sync with CoreAPI limits / validators
            var MAX_FILE_SIZE = 20000000; //in bytes = 20mb
            var MAX_COMMENT_LENGTH = 128;
            var FileAttachmentComponentController = (function () {
                //#endregion
                //#region ctor
                /* @ngInject */
                FileAttachmentComponentController.$inject = ["$log", "toaster", "_", "fileAttachmentService", "fileAttachmentOriginEnum", "applicationOriginEnum"];
                function FileAttachmentComponentController($log, toaster, _, fileAttachmentService, fileAttachmentOriginEnum, applicationOriginEnum) {
                    var _this = this;
                    this.$log = $log;
                    this.toaster = toaster;
                    this._ = _;
                    this.fileAttachmentService = fileAttachmentService;
                    this.fileAttachmentOriginEnum = fileAttachmentOriginEnum;
                    this.applicationOriginEnum = applicationOriginEnum;
                    this.hasCurrentUserUploadRights = false;
                    /**
                     * TODO MGA: improve inline-form error handling & UI feedback ! not dynamic // fluid to use
                     * @param fileAttachment
                     */
                    this.onUpdatedCommentValidateInput = function (fileAttachment) {
                        if (!fileAttachment.updatedComment || fileAttachment.updatedComment.length < 1) {
                            fileAttachment.updatedCommentErrorMessage = 'comment must be non-empty';
                            return false;
                        }
                        else if (fileAttachment.updatedComment && fileAttachment.updatedComment.length >= MAX_COMMENT_LENGTH) {
                            fileAttachment.updatedCommentErrorMessage = "comment must be < " + MAX_COMMENT_LENGTH + " characters";
                            return false;
                        }
                        else {
                            fileAttachment.updatedCommentErrorMessage = null; //reset error message to flag comment as valid
                            return true;
                        }
                    };
                    /**
                     * Handler dedicated to prevent on keypress='enter' the submission of a form if this component is inside one.
                     * Instead, it pushes the new value
                     */
                    this.onCommentInputKeyPress = function ($event, fileAttachment) {
                        var keyCode = $event.keyCode || $event.which;
                        if (keyCode === 13) {
                            //prevent form submission
                            $event.preventDefault();
                            //call 
                            _this.updateFileAttachmentComment(fileAttachment);
                        }
                    };
                    if (!this.elementIdBinding) {
                        this.$log.error('parameter {elementIdBinding} is mandatory.');
                        return;
                    }
                    if (!this.applicationOriginEnum[this.originBinding]) {
                        this.$log.error('parameter {originBinding} is mandatory.');
                        return;
                    }
                    this.httpPromises = new Array();
                    // get list of attached files for current element
                    this.getAttachedFiles();
                    // get flag to know if current user has upload rights for current item
                    this.getCurrentUserUploadRights();
                    // get supported mime types for file upload, based on srv info
                    this.getSupportedExtensions();
                    this.nbOfItemsPerPage = 10;
                    this.fileInvalidMessageArray = new Array();
                }
                //#endregion
                //#region file attachment management
                //TODO MGA: handle multiple files & clean up view bindings
                FileAttachmentComponentController.prototype.onFileSelected = function (files, file, newFiles, duplicateFiles, invalidFiles, event) {
                    var _this = this;
                    if (!files && !file)
                        return;
                    this.fileInvalidMessageArray = []; //reset error array
                    if (files) {
                        this.selectedFiles = files;
                    }
                    if (file) {
                        this.selectedFile = file;
                    }
                    if (files && files.length > 1) {
                        this.fileInvalidMessageArray.push('Cannot upload multiple files at once. Please select only one file.');
                        return;
                    }
                    //var fileExtension = file.name.substr(file.name.lastIndexOf('.') + 1);
                    var fileFormatSupported = _(this.supportedExtensions).any(function (supportedExtension) { return _this.selectedFile.getFileExtension() === supportedExtension.toLowerCase(); });
                    //var fileFormatSupported = file.type && //If file.type is null / empty, that means current OS doesn't know about the file format => delegate to server to validate if format is valid, we can't know client-side.
                    //    _(this.supportedExtensions).any((supportedMimeType) => file.type === supportedMimeType);
                    if (!fileFormatSupported)
                        this.fileInvalidMessageArray.push("Unsupported file format: '" + this.selectedFile.type + "' with extension: '" + this.selectedFile.getFileExtension() + "'");
                    if (!this.selectedFile.size)
                        this.fileInvalidMessageArray.push('Selected file is empty.');
                    else if (this.selectedFile.size >= MAX_FILE_SIZE)
                        this.fileInvalidMessageArray.push("Selected file is bigger (" + this.bytesToFormatedString(this.selectedFile.size) + ") than authorized file size: " + this.bytesToFormatedString(MAX_FILE_SIZE));
                };
                FileAttachmentComponentController.prototype.importSelectedFile = function () {
                    var _this = this;
                    if (!this.selectedFile || _(this.fileInvalidMessageArray).any())
                        return; //TODO MGA $log
                    var httpPromise = this.fileAttachmentService.attachFile(this.elementIdBinding, this.originBinding, this.selectedFile).then(function () {
                        _this.toaster.success("File (" + _this.selectedFile.name + ") successfully uploaded.");
                        _this.getAttachedFiles(); //TODO MGA : highlight new entry ?
                    }).finally(function () {
                        //clean up selected file
                        _this.clearSelectedFiles();
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.clearSelectedFiles = function () {
                    this.selectedFiles = null;
                    this.selectedFile = null;
                    this.fileInvalidMessageArray = []; // clear error messages
                    //this.fileSelectedIsValid = true;
                };
                FileAttachmentComponentController.prototype.downloadAttachedFile = function (fileAttachment) {
                    if (!fileAttachment || !fileAttachment.Id)
                        return;
                    var httpPromise = this.fileAttachmentService.downloadAttachedFile(fileAttachment, this.fileAttachmentOriginEnum[fileAttachment.FileOrigin])
                        .then(function () {
                        //TODO MGA ? or leave as is.
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.deleteAttachedFile = function (fileAttachment) {
                    var _this = this;
                    if (!fileAttachment || !fileAttachment.Id)
                        return;
                    var httpPromise = this.fileAttachmentService.deleteAttachedFile(fileAttachment.Id, this.fileAttachmentOriginEnum[fileAttachment.FileOrigin])
                        .then(function () {
                        _this.toaster.success("File (" + fileAttachment.FileName + ") successfully deleted.");
                        _this.getAttachedFiles();
                    });
                    this.httpPromises.push(httpPromise);
                };
                //TODO MGA: extract to service / extension method ?
                FileAttachmentComponentController.prototype.bytesToFormatedString = function (bytes) {
                    if (!bytes)
                        return '0 Byte';
                    var referenceScale = 1000; // or 1024 for binary ref vs. SI
                    var unitArray = ['Bytes', 'Kb', 'Mb', 'Gb', 'Tb', 'Pb', 'Eb', 'Zb', 'Yb'];
                    // get level to adopt for size multiple (bytes, KB etc).
                    var unitIndex = Math.floor(Math.log(bytes) / Math.log(referenceScale));
                    // 2 decimals, and if only Os after the ',', then parseFloat will trim ending 0s.
                    return parseFloat((bytes / Math.pow(referenceScale, unitIndex)).toFixed(2)) + ' ' + unitArray[unitIndex];
                };
                //#endregion
                //#region comment management
                FileAttachmentComponentController.prototype.switchToEditCommentMode = function (fileAttachment) {
                    fileAttachment.editCommentMode = true;
                    //set updated comment field to previous comment value
                    fileAttachment.updatedComment = fileAttachment.Comment || "";
                };
                FileAttachmentComponentController.prototype.updateFileAttachmentComment = function (fileAttachment) {
                    var _this = this;
                    if (!fileAttachment || !fileAttachment.Id || !fileAttachment.updatedComment)
                        return;
                    if (!this.onUpdatedCommentValidateInput(fileAttachment))
                        return; // check validation rules are ok
                    var httpPromise = this.fileAttachmentService.editFileAttachmentComment(fileAttachment.Id, this.fileAttachmentOriginEnum[fileAttachment.FileOrigin], fileAttachment.updatedComment).then(function () {
                        _this.clearEditCommentMode(fileAttachment); //TODO MGA: useless if we reload all data from srv
                        // retrieve update list of files with updated file comment from srv : TODO MGA improve reload (costly)
                        _this.getAttachedFiles();
                        // TODO MGA : highlight updated comment ?
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.cancelEditComment = function (fileAttachment) {
                    fileAttachment.editCommentMode = false;
                    //fileAttachment.updatedComment = ""; // TODO MGA: decide behavior ? better to keep last entry ? but then we must also keep error message
                    //fileAttachment.updatedCommentErrorMessage = null;
                };
                //#endregion
                //#endregion
                //#region private methods
                FileAttachmentComponentController.prototype.getAttachedFiles = function () {
                    var _this = this;
                    var httpPromise = this.fileAttachmentService.getAttachedFiles(this.elementIdBinding, this.originBinding).then(function (fileAttachmentList) {
                        _this.attachedFileList = fileAttachmentList;
                        _this.attachedFileListSource = fileAttachmentList; //TODO MGA : duplicate ? to prevent update to source list if collection modified ?
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.getSupportedExtensions = function () {
                    var _this = this;
                    var httpPromise = this.fileAttachmentService.getSupportedExtensions().then(function (supportedExtensions) {
                        _this.supportedExtensions = _(supportedExtensions).uniq();
                    });
                    this.httpPromises.push(httpPromise);
                };
                FileAttachmentComponentController.prototype.clearEditCommentMode = function (fileAttachment) {
                    fileAttachment.editCommentMode = false;
                    fileAttachment.updatedComment = null;
                    fileAttachment.updatedCommentErrorMessage = null;
                };
                FileAttachmentComponentController.prototype.getCurrentUserUploadRights = function () {
                    var _this = this;
                    this.fileAttachmentService
                        .getCurrentUserUploadRights(this.elementIdBinding, this.originBinding)
                        .then(function (booleanResponse) {
                        _this.hasCurrentUserUploadRights = booleanResponse;
                    });
                };
                return FileAttachmentComponentController;
            }());
            components.FileAttachmentComponentController = FileAttachmentComponentController;
            var FileAttachmentComponent = (function () {
                function FileAttachmentComponent() {
                    this.bindings = {
                        elementIdBinding: '=',
                        originBinding: '='
                    };
                    this.controller = FileAttachmentComponentController;
                    this.controllerAs = 'vm';
                    this.templateUrl = 'component/file-attachment.tpl.html';
                }
                return FileAttachmentComponent;
            }());
            components.FileAttachmentComponent = FileAttachmentComponent;
            angular.module('bluesky.core.components.fileAttachment', [
                'cgBusy',
                'smart-table',
                'toaster',
                'file-attachment-component-tpl',
                'bluesky.core.services.fileAttachment',
                'bluesky.core.models.fileAttachmentOriginEnum',
                'bluesky.core.models.applicationOriginEnum'
            ])
                .value('cgBusyDefaults', { templateUrl: 'templates/angular-busy/angular-busy-custom.tpl.html' })
                .constant('_', window['_'])
                .constant('moment', window['moment'])
                .component('fileAttachmentComponent', new FileAttachmentComponent());
        })(components = core.components || (core.components = {}));
    })(core = bluesky.core || (bluesky.core = {}));
})(bluesky || (bluesky = {}));

//# sourceMappingURL=data:application/json;base64,
